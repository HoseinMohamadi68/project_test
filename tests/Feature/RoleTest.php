<?php

namespace Tests\Feature;

use App\Constants\PermissionTitle;
use App\Models\Language\Language;
use App\Models\LocalizableModel;
use App\Models\User\Permission;
use App\Models\User\Role;
use App\Models\Translations\RoleTranslation;
use Database\Seeders\LanguageSeeder;
use Illuminate\Http\Response;
use Tests\TestCase;

class RoleTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seed(LanguageSeeder::class);
    }

    /**
     * @test
     */
    public function testCreateRole()
    {
        $this->actingAsUserWithPermission(PermissionTitle::CREATE_ROLE);
        $roleTranslations = RoleTranslation::factory()->make();
        $role = $roleTranslations->role;
        $response = $this->postJson(
            route('roles.store'),
            [
                Role::COMPANY_VISIBILITY => $role->getCompanyVisibility(),
                Role::OWNER_VISIBILITY => $role->getOwnerVisibility(),
                LocalizableModel::LOCALIZATION_KEY => [
                    $roleTranslations->getLocale() => [
                        RoleTranslation::LOCALE => $roleTranslations->getLocale(),
                        RoleTranslation::TITLE => $roleTranslations->getTitle(),
                    ]
                ]
            ]
        );

        $response->assertCreated();
        $this->assertEquals($response->getOriginalContent()->translations->first()->getTitle(), $roleTranslations->getTitle());
        $this->assertEquals($response->getOriginalContent()->translations->first()->getLocale(), $roleTranslations->getLocale());
        $this->assertEquals(!!$response->getOriginalContent()->getCompanyVisibility(), !!$role->getCompanyVisibility());
        $this->assertEquals(!!$response->getOriginalContent()->getOwnerVisibility(), !!$role->getOwnerVisibility());
    }

    /**
     * @test
     */
    public function createRoleAndAssignPermissions()
    {
        $roleTranslations = RoleTranslation::factory()->make();
        $role = $roleTranslations->role;
        $permission = Permission::factory()->create();
        $this->actingAsUserWithPermission(PermissionTitle::CREATE_ROLE);
        $response = $this->postJson(
            route('roles.store'),
            [
                Role::COMPANY_VISIBILITY => $role->getCompanyVisibility(),
                Role::OWNER_VISIBILITY => $role->getOwnerVisibility(),
                LocalizableModel::LOCALIZATION_KEY => [
                    $roleTranslations->getLocale() => [
                        RoleTranslation::LOCALE => $roleTranslations->getLocale(),
                        RoleTranslation::TITLE => $roleTranslations->getTitle(),
                    ]
                ],
                'permissions' => [$permission->getId()]
            ]
        );
        $response->assertCreated();
        $this->assertTrue($response->getOriginalContent()->permissions->contains($permission));
    }

    /**
     * @test
     */
    public function userCanNotCreateRoleWithoutPermission()
    {
        $this->actingAsUser();
        $this->postJson(route('roles.store'), [])->assertForbidden();
    }

    /**
     * @test
     */
    public function UserWithoutLoggedInCanNotCreateRole()
    {
        $this->postJson('api/roles', [])->assertUnauthorized();
    }

    /**
     * @test
     */
    public function canNotCreateRoleWithInvalidParameters()
    {
        $this->actingAsUserWithPermission(PermissionTitle::CREATE_ROLE);
        $response = $this->postJson('api/roles', []);
        $response->assertStatus(Response::HTTP_UNPROCESSABLE_ENTITY);

        $this->assertArrayHasKey(LocalizableModel::LOCALIZATION_KEY, $response->json());
        $this->assertArrayHasKey(Role::COMPANY_VISIBILITY, $response->json());
        $this->assertArrayHasKey(Role::OWNER_VISIBILITY, $response->json());

        $role = Role::factory()->make();
        $badLocal = 'xx';
        $response = $this->postJson(
            route('roles.store'),
            [
                Role::COMPANY_VISIBILITY => $role->getCompanyVisibility(),
                Role::OWNER_VISIBILITY => $role->getOwnerVisibility(),
                LocalizableModel::LOCALIZATION_KEY => [
                    $badLocal => [
                        RoleTranslation::LOCALE => $badLocal,
                        RoleTranslation::TITLE => -1,
                    ]
                ]
            ]
        );
        $content = $response->getOriginalContent()->toArray();
        $response->assertStatus(Response::HTTP_UNPROCESSABLE_ENTITY);
        $this->assertArrayHasKey(LocalizableModel::LOCALIZATION_KEY . '.'. $badLocal . '.locale', $content);
        $this->assertArrayHasKey(LocalizableModel::LOCALIZATION_KEY . '.'. $badLocal . '.title', $content);
    }

    /**
     * @test
     */
    public function getRole()
    {
        $roleTranslations = RoleTranslation::factory()->create();
        $role = $roleTranslations->role;
        $this->actingAsUserWithPermission(PermissionTitle::GET_ROLE);
        $response = $this->getJson(route('roles.show', $role));
        $response->assertOk();
        $this->assertTrue($response->getOriginalContent()->is($role));
    }

    /**
     * @test
     */
    public function userWithoutPermissionCanNotGetRole()
    {
        $role = Role::factory()->create();
        $this->actingAsUser();
        $this->getJson(route('roles.show', $role))->assertForbidden();
    }

    /**
     * @test
     */
    public function userWithoutLoggedInCanNotGetRole()
    {
        $role = Role::factory()->create();
        $this->getJson(route('roles.show', $role))->assertUnauthorized();
    }

    /**
     * @test
     */
    public function testUpdateRole()
    {
        $this->actingAsUserWithPermission(PermissionTitle::UPDATE_ROLE);

        $roleTranslations = RoleTranslation::factory()->create();
        $role = $roleTranslations->role;

        $roleTranslationsUpdate = RoleTranslation::factory()->make();
        $roleUpdate = $roleTranslations->role;

        $response = $this->patchJson(
            route('roles.update', $role),
            [
                Role::COMPANY_VISIBILITY => $roleUpdate->getCompanyVisibility(),
                Role::OWNER_VISIBILITY => $roleUpdate->getOwnerVisibility(),
                LocalizableModel::LOCALIZATION_KEY => [
                    $roleTranslationsUpdate->getLocale() => [
                        RoleTranslation::LOCALE => $roleTranslationsUpdate->getLocale(),
                        RoleTranslation::TITLE => $roleTranslationsUpdate->getTitle(),
                    ]
                ]
            ]
        );
        $response->assertOk();
        $this->assertEquals($response->getOriginalContent()->translations->first()->getTitle(), $roleTranslations->getTitle());
        $this->assertEquals($response->getOriginalContent()->translations->first()->getLocale(), $roleTranslations->getLocale());
        $this->assertEquals((bool) $roleUpdate->getCompanyVisibility(), (bool) $response->getOriginalContent()->getCompanyVisibility());
        $this->assertEquals((bool) $roleUpdate->getOwnerVisibility(), (bool) $response->getOriginalContent()->getOwnerVisibility());
    }

    /**
     * @test
     */
        public function updateRoleAndAssignPermission()
    {
        $this->actingAsUserWithPermission(PermissionTitle::UPDATE_ROLE);
        $role = Role::factory()
            ->has(RoleTranslation::factory(), 'translations')
            ->create();
        $permission = Permission::factory()->create();
        $title = $this->faker->unique()->name;
        $companyVisibility = $this->faker->boolean;
        $ownerVisibility = $this->faker->boolean;

        $response = $this->patchJson(
            route('roles.update', $role),
            [
                Role::COMPANY_VISIBILITY => $companyVisibility,
                Role::OWNER_VISIBILITY => $ownerVisibility,
                LocalizableModel::LOCALIZATION_KEY => [
                    'en' => [
                        RoleTranslation::LOCALE => 'en',
                        RoleTranslation::TITLE => $title,
                    ]
                ],
                'permissions' => [$permission->getId()],
            ]
        );
        $response->assertOk();
        $this->assertTrue($response->getOriginalContent()->permissions->contains($permission));
    }

    /**
     * @test
     */
    public function userWithoutPermissionCanNotUpdateRole()
    {
        $this->actingAsUser();
        $role = Role::factory()->create();
        $this->patchJson(route('roles.update', $role), [])->assertForbidden();
    }

    /**
     * @test
     */
    public function userWithoutLoggedInCanNotUpdateRole()
    {
        $role = Role::factory()->create();
        $this->patchJson(route('roles.update', $role), [])->assertUnauthorized();
    }

    /**
     * @test
     */
    public function testDeleteRole()
    {
        $this->actingAsUserWithPermission(PermissionTitle::DELETE_ROLE);
        $role = Role::factory()->create();
        $this->deleteJson(route('roles.destroy', $role));
        $this->assertDatabaseMissing(Role::TABLE, [Role::ID => $role->getId()]);
    }

    /**
     * @test
     */
    public function userWithoutLoggedInCanNotDeleteRole()
    {
        $role = Role::factory()->create();
        $this->deleteJson(route('roles.destroy', $role))->assertUnauthorized();
    }

    /**
     * @test
     */
    public function userWithoutPermissionCanNotDeleteRole()
    {
        $this->actingAsUser();
        $role = Role::factory()->create();
        $this->deleteJson(route('roles.destroy', $role))->assertForbidden();
    }

    /**
     * @test
     */
    public function testGetAllRolePagination()
    {
        Role::factory()->has(RoleTranslation::factory()->count(5), 'translations')->count(2)->create();
        $this->actingAsUserWithPermission(PermissionTitle::GET_ALL_ROLES);

        $response = $this->getJson(route('roles.index'));
        $response->assertOk();
        $this->assertEquals(3, count($response->getOriginalContent()));
    }

    /**
     * @test
     */
    public function getAllRolePaginationPerpage()
    {
        Role::factory()->has(RoleTranslation::factory(), 'translations')->count(5)->create();
        $this->actingAsUserWithPermission(PermissionTitle::GET_ALL_ROLES);
        $response = $this->getJson(route('roles.index') . '?per_page=3');
        $response->assertOk();
        $this->assertEquals(3, count($response->getOriginalContent()));
    }

    /**
     * @test
     */
    public function testFilterRoleByTitle()
    {
        $this->actingAsUserWithPermission(PermissionTitle::GET_ALL_ROLES);
        Role::factory()
            ->has(RoleTranslation::factory(), 'translations')->count(5)
            ->create();
        $role = Role::factory()
            ->has(RoleTranslation::factory([RoleTranslation::TITLE => '1234567891']), 'translations')
            ->create();
        $secondRole = Role::factory()
            ->has(RoleTranslation::factory([RoleTranslation::TITLE => '1234567892']), 'translations')
            ->create();

        $response = $this->getJson(route('roles.index') . '?title=1234567891');
        $response->assertOk();
        $this->assertEquals(1, count($response->getOriginalContent()));
        $this->assertTrue($response->getOriginalContent()->contains(Role::ID, $role->getId()));
        $this->assertFalse($response->getOriginalContent()->contains(Role::ID, $secondRole->getId()));
    }

    /**
     * @test
     */
    public function filterRoleByCompanyVisibility()
    {
        $this->actingAsUserWithPermission(PermissionTitle::GET_ALL_ROLES);
        Role::factory()->count(5)->create([Role::COMPANY_VISIBILITY => false]);
        $firstRole = Role::factory()
            ->has(RoleTranslation::factory(), 'translations')
            ->create([Role::COMPANY_VISIBILITY => true]);
        $secondRole = Role::factory()
            ->has(RoleTranslation::factory(), 'translations')
            ->create([Role::COMPANY_VISIBILITY => false]);
        $response = $this->getJson(route('roles.index') . '?companyVisibility=true');
        $response->assertOk();
        $this->assertTrue(
            $response->getOriginalContent()->contains(Role::ID, $firstRole->getId())
        );
        $this->assertFalse(
            $response->getOriginalContent()->contains(Role::ID, $secondRole->getId())
        );
    }

    /**
     * @test
     */
    public function filterRoleByOwnerVisibility()
    {
        $this->actingAsUserWithPermission(PermissionTitle::GET_ALL_ROLES);
        Role::factory()->count(5)->create([Role::OWNER_VISIBILITY => false]);
        $firstRole = Role::factory()
            ->has(RoleTranslation::factory(), 'translations')
            ->create([Role::OWNER_VISIBILITY => true]);
        $secondRole = Role::factory()
            ->has(RoleTranslation::factory(), 'translations')
            ->create([Role::OWNER_VISIBILITY => false]);
        $response = $this->getJson(route('roles.index') . '?ownerVisibility=true');
        $response->assertOk();
        $this->assertTrue(
            $response->getOriginalContent()->contains(Role::ID, $firstRole->getId())
        );
        $this->assertFalse(
            $response->getOriginalContent()->contains(Role::ID, $secondRole->getId())
        );
    }

    /**
     * @test
     */
    public function userWithoutPermissionCanNotFilterRoleByTitle()
    {
        $this->actingAsUser();
        Role::factory()->count(5)->create();
        Role::factory()
            ->has(RoleTranslation::factory([RoleTranslation::TITLE => '1234567891']), 'translations')
            ->create();
        $this->getJson(route('roles.index') . '?title=1234567891')->assertForbidden();
    }
}
